-- drop the object first

DROP PROCEDURE IF EXISTS SALESPROFITDATE;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--

-- USE chromispos;

-- USE grandchromis;

DELIMITER $$

--
-- Create procedure "SALESPROFITDATE"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE SALESPROFITDATE(IN in_DATE1 VARCHAR(10),IN in_DATE2 VARCHAR(10))
BEGIN
  IF ((in_DATE1 IS NOT NULL OR in_DATE1 <> '') AND (in_DATE2 IS NOT NULL OR in_DATE2 <> '')) THEN
-- SELECT 'DATE 1 AND 2 ARE NOT EMPTY' AS RESULTS; 
--          WHERE DATE(STOCKDIARY.DATENEW) BETWEEN in_DATE1 AND in_DATE2
  SELECT
  PRODUCTS.REFERENCE,
  PRODUCTS.NAME,
  DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y") AS TDATE,
  -- '00:00:00' AS TTIME, -- DATE_FORMAT(RECEIPTS.DATENEW,"%h:%i:%s %p") AS TTIME,
  PRODUCTS.PRICEBUY,
  PRODUCTS.PRICESELL,
  SUM(TICKETLINES.UNITS) AS SOLD_UNITS,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL)
  - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES -- TICKETLINES 
INNER JOIN products ON products.ID = ticketlines.PRODUCT
INNER JOIN receipts ON receipts.ID = ticketlines.TICKET
INNER JOIN tickets ON TICKETS.ID = ticketlines.TICKET AND TICKETS.TICKETTYPE=0
where ticketlines.ticket in 
    (select receipts.id from receipts 
    WHERE receipts.DATENEW BETWEEN STR_TO_DATE(in_DATE1, '%d/%m/%Y') AND DATE_ADD(STR_TO_DATE(in_DATE2, '%d/%m/%Y'),INTERVAL 1 DAY)) 
-- and ticketlines.product='8709da74-5e71-4d8d-b91b-0cf299103222'
GROUP BY DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y"),TICKETLINES.PRODUCT  
ORDER BY RECEIPTS.DATENEW,PRODUCTS.NAME;
ELSEIF ((in_DATE1 IS NOT NULL
  OR in_DATE1 != '')
  AND (in_DATE2 IS NULL
  OR in_DATE2 = '')) THEN
-- SELECT 'DATE 1 IS NOT EMPTY, DATE2 IS EMPTY' AS RESULTS;
SELECT
  PRODUCTS.REFERENCE,
  PRODUCTS.NAME,
  DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y") AS TDATE,
  -- '00:00:00' AS TTIME, -- DATE_FORMAT(RECEIPTS.DATENEW,"%h:%i:%s %p") AS TTIME,
  PRODUCTS.PRICEBUY,
  PRODUCTS.PRICESELL,
  SUM(TICKETLINES.UNITS) AS SOLD_UNITS,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL)
  - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES -- TICKETLINES 
INNER JOIN products ON products.ID = ticketlines.PRODUCT
INNER JOIN receipts ON receipts.ID = ticketlines.TICKET
INNER JOIN tickets ON TICKETS.ID = ticketlines.TICKET AND TICKETS.TICKETTYPE=0
where ticketlines.ticket in (select receipts.id from receipts where YEAR(RECEIPTS.DATENEW) = YEAR(STR_TO_DATE(in_DATE1,"%d/%m/%Y"))
 AND MONTH(RECEIPTS.DATENEW) = MONTH(STR_TO_DATE(in_DATE1,"%d/%m/%Y"))
  AND DAY(RECEIPTS.DATENEW) = DAY(STR_TO_DATE(in_DATE1,"%d/%m/%Y"))) 
-- and ticketlines.product='8709da74-5e71-4d8d-b91b-0cf299103222'
GROUP BY TICKETLINES.PRODUCT -- ,STOCKDIARY.DATENEW      
ORDER BY DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y"),PRODUCTS.NAME ASC;
ELSEIF ((in_DATE1 IS NULL
  OR in_DATE1 = '')
  AND (in_DATE2 IS NULL
  OR in_DATE2 = '')) THEN
-- 'DATE 1 IS EMPTY, DATE2 IS EMPTY' AS RESULTS;
  SELECT
  PRODUCTS.REFERENCE,
  PRODUCTS.NAME,
  DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y") AS TDATE,
  -- '00:00:00' AS TTIME, -- DATE_FORMAT(RECEIPTS.DATENEW,"%h:%i:%s %p") AS TTIME,
  PRODUCTS.PRICEBUY,
  PRODUCTS.PRICESELL,
  SUM(TICKETLINES.UNITS) AS SOLD_UNITS,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL)
  - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES -- TICKETLINES 
INNER JOIN products ON products.ID = ticketlines.PRODUCT
INNER JOIN receipts ON receipts.ID = ticketlines.TICKET
INNER JOIN tickets ON TICKETS.ID = ticketlines.TICKET AND TICKETS.TICKETTYPE=0
where ticketlines.ticket in (select receipts.id from receipts) -- where DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y")=in_DATE1) 
-- and ticketlines.product='8709da74-5e71-4d8d-b91b-0cf299103222'
GROUP BY DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y"),TICKETLINES.PRODUCT -- ,STOCKDIARY.DATENEW      
ORDER BY RECEIPTS.DATENEW,PRODUCTS.NAME ASC;
END IF;
END
$$

DELIMITER ;