-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE chromispos;

DELIMITER $$

--
-- Create procedure "SALESPROFITMONTHLY"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE SALESPROFITMONTHLY(IN in_DATE1 VARCHAR(10),IN in_DATE2 VARCHAR(10))
BEGIN
  IF ((in_DATE1 IS NOT NULL OR in_DATE1 <> '') AND (in_DATE2 IS NOT NULL OR in_DATE2 <> '')) THEN
-- SELECT 'DATE 1 AND 2 ARE NOT EMPTY' AS RESULTS; 
--          WHERE DATE(STOCKDIARY.DATENEW) BETWEEN in_DATE1 AND in_DATE2
SELECT
  --   PRODUCTS.REFERENCE,
  --   PRODUCTS.NAME,
  DATE_FORMAT(STOCKDIARY.DATENEW, "%M/%Y") AS TDATE,
  -- DATE_FORMAT(STOCKDIARY.DATENEW,"%h:%i:%s %p") AS TTIME,
  --   PRODUCTS.PRICEBUY,
  --   PRODUCTS.PRICESELL,
  --   SUM(TICKETLINES.UNITS) AS SOLD_UNITS,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL)
  - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS EXPECTED_PROFIT,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS ACTUAL_PROFIT
FROM (TICKETLINES TICKETLINES
  INNER JOIN RECEIPTS RECEIPTS
    ON (TICKETLINES.TICKET = RECEIPTS.ID)
  LEFT OUTER JOIN PRODUCTS PRODUCTS
    ON (TICKETLINES.PRODUCT = PRODUCTS.ID)
  RIGHT JOIN STOCKDIARY STOCKDIARY
    ON (STOCKDIARY.PRODUCT = PRODUCTS.ID)
    AND (STOCKDIARY.DATENEW = RECEIPTS.DATENEW))
WHERE DATE_FORMAT(STOCKDIARY.DATENEW, "%m/%Y")
BETWEEN DATE_FORMAT(in_DATE1, "%m/%Y") AND DATE_FORMAT(in_DATE2, "%m/%Y")
GROUP BY DATE_FORMAT(STOCKDIARY.DATENEW, "%m/%Y")
ORDER BY STOCKDIARY.DATENEW;
ELSEIF ((in_DATE1 IS NOT NULL
  OR in_DATE1 != '')
  AND (in_DATE2 IS NULL
  OR in_DATE2 = '')) THEN
-- SELECT 'DATE 1 IS NOT EMPTY, DATE2 IS EMPTY' AS RESULTS;
SELECT
  --   PRODUCTS.REFERENCE,
  --   PRODUCTS.NAME,
  DATE_FORMAT(STOCKDIARY.DATENEW, "%M/%Y") AS TDATE,
  -- DATE_FORMAT(STOCKDIARY.DATENEW,"%h:%i:%s %p") AS TTIME,
  --   PRODUCTS.PRICEBUY,
  --   PRODUCTS.PRICESELL,
  --   SUM(TICKETLINES.UNITS) AS SOLD_UNITS,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL)
  - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS EXPECTED_PROFIT,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS ACTUAL_PROFIT
FROM (TICKETLINES TICKETLINES
  INNER JOIN RECEIPTS RECEIPTS
    ON (TICKETLINES.TICKET = RECEIPTS.ID)
  LEFT OUTER JOIN PRODUCTS PRODUCTS
    ON (TICKETLINES.PRODUCT = PRODUCTS.ID)
  RIGHT JOIN STOCKDIARY STOCKDIARY
    -- ON (STOCKDIARY.PRODUCT=PRODUCTS.ID)
    ON (STOCKDIARY.PRODUCT = PRODUCTS.ID)
    AND (STOCKDIARY.DATENEW = RECEIPTS.DATENEW))
-- WHERE STOCKDIARY.DATENEW >= '2017/07/14' AND STOCKDIARY.DATENEW < '2017/07/15'
WHERE DATE_FORMAT(STOCKDIARY.DATENEW, "%m/%Y") = in_DATE1
GROUP BY DATE_FORMAT(STOCKDIARY.DATENEW, "%M/%Y")
ORDER BY STOCKDIARY.DATENEW;
ELSEIF ((in_DATE1 IS NULL
  OR in_DATE1 = '')
  AND (in_DATE2 IS NULL
  OR in_DATE2 = '')) THEN
-- 'DATE 1 IS EMPTY, DATE2 IS EMPTY' AS RESULTS;
SELECT
  --   PRODUCTS.REFERENCE,
  --   PRODUCTS.NAME,
  DATE_FORMAT(STOCKDIARY.DATENEW, "%M/%Y") AS TDATE,
  -- DATE_FORMAT(STOCKDIARY.DATENEW,"%h:%i:%s %p") AS TTIME, --TTIME required only for detailed per day
  --   PRODUCTS.PRICEBUY,
  --   PRODUCTS.PRICESELL,
  --   SUM(TICKETLINES.UNITS) AS SOLD_UNITS,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL)
  - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS EXPECTED_PROFIT,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS ACTUAL_PROFIT
FROM (TICKETLINES TICKETLINES
  INNER JOIN RECEIPTS RECEIPTS
    ON (TICKETLINES.TICKET = RECEIPTS.ID)
  INNER JOIN PRODUCTS PRODUCTS
    ON (TICKETLINES.PRODUCT = PRODUCTS.ID)
  INNER JOIN STOCKDIARY STOCKDIARY
    ON (STOCKDIARY.PRODUCT = PRODUCTS.ID)
    AND STOCKDIARY.DATENEW = RECEIPTS.DATENEW)
GROUP BY DATE_FORMAT(STOCKDIARY.DATENEW, "%M/%Y")
ORDER BY STOCKDIARY.DATENEW;
END IF;
END
$$

DELIMITER ;