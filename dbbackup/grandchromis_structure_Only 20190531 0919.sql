--
-- Script was generated by Devart dbForge Studio 2019 for MySQL, Version 8.1.22.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 31/05/2019 09:19:51 AM
-- Server version: 5.6.26
-- Client version: 4.1
--


-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

-- DROP DATABASE IF EXISTS grandchromis;

CREATE DATABASE grandchromis
	CHARACTER SET latin1
	COLLATE latin1_swedish_ci;

--
-- Set default database
--
USE grandchromis;

--
-- Create table `roles`
--
CREATE TABLE roles (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  PERMISSIONS MEDIUMBLOB DEFAULT NULL,
  RIGHTSLEVEL INT(11) NOT NULL DEFAULT 4,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `ROLES_NAME_INX` on table `roles`
--
ALTER TABLE roles 
  ADD UNIQUE INDEX ROLES_NAME_INX(NAME);

--
-- Create table `people`
--
CREATE TABLE people (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) DEFAULT NULL,
  APPPASSWORD VARCHAR(255) DEFAULT NULL,
  CARD VARCHAR(255) DEFAULT NULL,
  ROLE VARCHAR(255) NOT NULL,
  VISIBLE BIT(1) NOT NULL,
  IMAGE MEDIUMBLOB DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `PEOPLE_CARD_INX` on table `people`
--
ALTER TABLE people 
  ADD INDEX PEOPLE_CARD_INX(CARD);

--
-- Create index `PEOPLE_NAME_INX` on table `people`
--
ALTER TABLE people 
  ADD UNIQUE INDEX PEOPLE_NAME_INX(NAME);

--
-- Create foreign key
--
ALTER TABLE people 
  ADD CONSTRAINT PEOPLE_FK_1 FOREIGN KEY (ROLE)
    REFERENCES roles(ID);

--
-- Create table `leaves`
--
CREATE TABLE leaves (
  ID VARCHAR(255) NOT NULL,
  PPLID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  STARTDATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  ENDDATE TIMESTAMP NOT NULL DEFAULT '0000-00-00 00:00:00',
  NOTES VARCHAR(255) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create foreign key
--
ALTER TABLE leaves 
  ADD CONSTRAINT LEAVES_PPLID FOREIGN KEY (PPLID)
    REFERENCES people(ID);

--
-- Create table `taxcustcategories`
--
CREATE TABLE taxcustcategories (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `TAXCUSTCAT_NAME_INX` on table `taxcustcategories`
--
ALTER TABLE taxcustcategories 
  ADD UNIQUE INDEX TAXCUSTCAT_NAME_INX(NAME);

--
-- Create table `customers`
--
CREATE TABLE customers (
  ID VARCHAR(255) NOT NULL,
  SEARCHKEY VARCHAR(255) NOT NULL,
  TAXID VARCHAR(255) DEFAULT NULL,
  NAME VARCHAR(255) NOT NULL,
  TAXCATEGORY VARCHAR(255) DEFAULT NULL,
  CARD VARCHAR(255) DEFAULT NULL,
  MAXDEBT DOUBLE NOT NULL DEFAULT 0,
  ADDRESS VARCHAR(255) DEFAULT NULL,
  ADDRESS2 VARCHAR(255) DEFAULT NULL,
  POSTAL VARCHAR(255) DEFAULT NULL,
  CITY VARCHAR(255) DEFAULT NULL,
  REGION VARCHAR(255) DEFAULT NULL,
  COUNTRY VARCHAR(255) DEFAULT NULL,
  FIRSTNAME VARCHAR(255) DEFAULT NULL,
  LASTNAME VARCHAR(255) DEFAULT NULL,
  EMAIL VARCHAR(255) DEFAULT NULL,
  PHONE VARCHAR(255) DEFAULT NULL,
  PHONE2 VARCHAR(255) DEFAULT NULL,
  FAX VARCHAR(255) DEFAULT NULL,
  NOTES VARCHAR(255) DEFAULT NULL,
  VISIBLE BIT(1) NOT NULL DEFAULT b'1',
  CURDATE TIMESTAMP NULL DEFAULT NULL,
  CURDEBT DOUBLE DEFAULT 0,
  IMAGE MEDIUMBLOB DEFAULT NULL,
  DISCOUNT DOUBLE DEFAULT 0,
  DOB TIMESTAMP NULL DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 303,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `CUSTOMERS_CARD_INX` on table `customers`
--
ALTER TABLE customers 
  ADD INDEX CUSTOMERS_CARD_INX(CARD);

--
-- Create index `CUSTOMERS_NAME_INX` on table `customers`
--
ALTER TABLE customers 
  ADD INDEX CUSTOMERS_NAME_INX(NAME);

--
-- Create index `CUSTOMERS_SKEY_INX` on table `customers`
--
ALTER TABLE customers 
  ADD UNIQUE INDEX CUSTOMERS_SKEY_INX(SEARCHKEY);

--
-- Create index `CUSTOMERS_TAXID_INX` on table `customers`
--
ALTER TABLE customers 
  ADD INDEX CUSTOMERS_TAXID_INX(TAXID);

--
-- Create foreign key
--
ALTER TABLE customers 
  ADD CONSTRAINT CUSTOMERS_TAXCAT FOREIGN KEY (TAXCATEGORY)
    REFERENCES taxcustcategories(ID);

--
-- Create view `view_allcustomers`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_allcustomers
AS
SELECT
  `customers`.`ID` AS `ID`,
  `customers`.`NAME` AS `NAME`,
  `customers`.`MAXDEBT` AS `MAXDEBT`,
  `customers`.`CURDEBT` AS `CURDEBT`
FROM `customers`
ORDER BY `customers`.`NAME`;

--
-- Create table `closedcash`
--
CREATE TABLE closedcash (
  MONEY VARCHAR(255) NOT NULL,
  HOST VARCHAR(255) NOT NULL,
  HOSTSEQUENCE INT(11) NOT NULL,
  DATESTART TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  DATEEND TIMESTAMP NULL DEFAULT NULL,
  NOSALES INT(11) NOT NULL DEFAULT 0,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (MONEY)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 358,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `CLOSEDCASH_INX_1` on table `closedcash`
--
ALTER TABLE closedcash 
  ADD INDEX CLOSEDCASH_INX_1(DATESTART);

--
-- Create index `CLOSEDCASH_INX_SEQ` on table `closedcash`
--
ALTER TABLE closedcash 
  ADD UNIQUE INDEX CLOSEDCASH_INX_SEQ(HOST, HOSTSEQUENCE);

--
-- Create table `receipts`
--
CREATE TABLE receipts (
  ID VARCHAR(255) NOT NULL,
  MONEY VARCHAR(255) NOT NULL,
  DATENEW TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PERSON VARCHAR(255) DEFAULT NULL,
  ATTRIBUTES MEDIUMBLOB DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 706,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `RECEIPTS_INX_1` on table `receipts`
--
ALTER TABLE receipts 
  ADD INDEX RECEIPTS_INX_1(DATENEW);

--
-- Create foreign key
--
ALTER TABLE receipts 
  ADD CONSTRAINT RECEIPTS_FK_MONEY FOREIGN KEY (MONEY)
    REFERENCES closedcash(MONEY);

--
-- Create table `tickets`
--
CREATE TABLE tickets (
  ID VARCHAR(255) NOT NULL,
  TICKETTYPE INT(11) NOT NULL,
  TICKETID INT(11) NOT NULL,
  PERSON VARCHAR(255) NOT NULL,
  CUSTOMER VARCHAR(255) DEFAULT NULL,
  STATUS INT(11) NOT NULL DEFAULT 0,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 136,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `TICKETS_TICKETID` on table `tickets`
--
ALTER TABLE tickets 
  ADD INDEX TICKETS_TICKETID(TICKETTYPE, TICKETID);

--
-- Create foreign key
--
ALTER TABLE tickets 
  ADD CONSTRAINT TICKETS_CUSTOMERS_FK FOREIGN KEY (CUSTOMER)
    REFERENCES customers(ID);

--
-- Create foreign key
--
ALTER TABLE tickets 
  ADD CONSTRAINT TICKETS_FK_2 FOREIGN KEY (PERSON)
    REFERENCES people(ID);

--
-- Create foreign key
--
ALTER TABLE tickets 
  ADD CONSTRAINT TICKETS_FK_ID FOREIGN KEY (ID)
    REFERENCES receipts(ID);

--
-- Create table `payments`
--
CREATE TABLE payments (
  ID VARCHAR(255) NOT NULL,
  RECEIPT VARCHAR(255) NOT NULL,
  PAYMENT VARCHAR(255) NOT NULL,
  TOTAL DOUBLE NOT NULL,
  TRANSID VARCHAR(255) DEFAULT NULL,
  NOTES VARCHAR(255) DEFAULT NULL,
  TENDERED DOUBLE NOT NULL DEFAULT 0,
  CARDNAME VARCHAR(255) DEFAULT NULL,
  RETURNMSG MEDIUMBLOB DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 187,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `PAYMENTS_INX_1` on table `payments`
--
ALTER TABLE payments 
  ADD INDEX PAYMENTS_INX_1(PAYMENT);

--
-- Create foreign key
--
ALTER TABLE payments 
  ADD CONSTRAINT PAYMENTS_FK_RECEIPT FOREIGN KEY (RECEIPT)
    REFERENCES receipts(ID);

--
-- Create table `taxcategories`
--
CREATE TABLE taxcategories (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `TAXCAT_NAME_INX` on table `taxcategories`
--
ALTER TABLE taxcategories 
  ADD UNIQUE INDEX TAXCAT_NAME_INX(NAME);

--
-- Create table `taxes`
--
CREATE TABLE taxes (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  CATEGORY VARCHAR(255) NOT NULL,
  CUSTCATEGORY VARCHAR(255) DEFAULT NULL,
  PARENTID VARCHAR(255) DEFAULT NULL,
  RATE DOUBLE NOT NULL DEFAULT 0,
  RATECASCADE BIT(1) NOT NULL DEFAULT b'0',
  RATEORDER INT(11) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `TAXES_NAME_INX` on table `taxes`
--
ALTER TABLE taxes 
  ADD UNIQUE INDEX TAXES_NAME_INX(NAME);

--
-- Create foreign key
--
ALTER TABLE taxes 
  ADD CONSTRAINT TAXES_CAT_FK FOREIGN KEY (CATEGORY)
    REFERENCES taxcategories(ID);

--
-- Create foreign key
--
ALTER TABLE taxes 
  ADD CONSTRAINT TAXES_CUSTCAT_FK FOREIGN KEY (CUSTCATEGORY)
    REFERENCES taxcustcategories(ID);

--
-- Create foreign key
--
ALTER TABLE taxes 
  ADD CONSTRAINT TAXES_TAXES_FK FOREIGN KEY (PARENTID)
    REFERENCES taxes(ID);

--
-- Create table `taxlines`
--
CREATE TABLE taxlines (
  ID VARCHAR(255) NOT NULL,
  RECEIPT VARCHAR(255) NOT NULL,
  TAXID VARCHAR(255) NOT NULL,
  BASE DOUBLE NOT NULL DEFAULT 0,
  AMOUNT DOUBLE NOT NULL DEFAULT 0,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 176,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create foreign key
--
ALTER TABLE taxlines 
  ADD CONSTRAINT TAXLINES_RECEIPT FOREIGN KEY (RECEIPT)
    REFERENCES receipts(ID);

--
-- Create foreign key
--
ALTER TABLE taxlines 
  ADD CONSTRAINT TAXLINES_TAX FOREIGN KEY (TAXID)
    REFERENCES taxes(ID);

--
-- Create table `promotions`
--
CREATE TABLE promotions (
  ID VARCHAR(50) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  CRITERIA MEDIUMBLOB DEFAULT NULL,
  SCRIPT MEDIUMBLOB NOT NULL,
  ALLPRODUCTS BIT(1) DEFAULT b'0',
  ISENABLED BIT(1) DEFAULT b'1',
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `categories`
--
CREATE TABLE categories (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  PARENTID VARCHAR(255) DEFAULT NULL,
  TEXTTIP VARCHAR(255) DEFAULT NULL,
  CATSHOWNAME BIT(1) NOT NULL DEFAULT b'1',
  IMAGE MEDIUMBLOB DEFAULT NULL,
  COLOUR VARCHAR(50) DEFAULT NULL,
  CATORDER INT(11) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 182,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `CATEGORIES_NAME_INX` on table `categories`
--
ALTER TABLE categories 
  ADD UNIQUE INDEX CATEGORIES_NAME_INX(NAME);

--
-- Create foreign key
--
ALTER TABLE categories 
  ADD CONSTRAINT CATEGORIES_FK_1 FOREIGN KEY (PARENTID)
    REFERENCES categories(ID);

--
-- Create table `attributeset`
--
CREATE TABLE attributeset (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `products`
--
CREATE TABLE products (
  ID VARCHAR(255) NOT NULL,
  REFERENCE VARCHAR(255) NOT NULL,
  CODE VARCHAR(255) NOT NULL,
  CODETYPE VARCHAR(50) DEFAULT NULL,
  NAME VARCHAR(255) NOT NULL,
  PRICEBUY DOUBLE NOT NULL DEFAULT 0,
  PRICESELL DOUBLE NOT NULL DEFAULT 0,
  CATEGORY VARCHAR(255) NOT NULL,
  TAXCAT VARCHAR(255) NOT NULL,
  ATTRIBUTESET_ID VARCHAR(255) DEFAULT NULL,
  STOCKCOST DOUBLE DEFAULT NULL,
  STOCKVOLUME DOUBLE DEFAULT NULL,
  ISCOM BIT(1) NOT NULL DEFAULT b'0',
  ISSCALE BIT(1) NOT NULL DEFAULT b'0',
  ISKITCHEN BIT(1) NOT NULL DEFAULT b'0',
  PRINTKB BIT(1) NOT NULL DEFAULT b'0',
  SENDSTATUS BIT(1) NOT NULL DEFAULT b'0',
  ISSERVICE BIT(1) NOT NULL DEFAULT b'0',
  DISPLAY VARCHAR(255) DEFAULT NULL,
  ATTRIBUTES MEDIUMBLOB DEFAULT NULL,
  ISVPRICE BIT(1) NOT NULL DEFAULT b'0',
  ISVERPATRIB BIT(1) NOT NULL DEFAULT b'0',
  TEXTTIP VARCHAR(255) DEFAULT NULL,
  WARRANTY BIT(1) NOT NULL DEFAULT b'0',
  IMAGE MEDIUMBLOB DEFAULT NULL,
  STOCKUNITS DOUBLE NOT NULL DEFAULT 0,
  ALIAS VARCHAR(50) DEFAULT NULL,
  ALWAYSAVAILABLE BIT(1) NOT NULL DEFAULT b'0',
  DISCOUNTED VARCHAR(5) DEFAULT 'no',
  CANDISCOUNT BIT(1) NOT NULL DEFAULT b'1',
  ISCATALOG BIT(1) DEFAULT NULL,
  CATORDER INT(11) DEFAULT NULL,
  ISPACK BIT(1) NOT NULL DEFAULT b'0',
  PACKQUANTITY DOUBLE DEFAULT NULL,
  PACKPRODUCT VARCHAR(255) DEFAULT NULL,
  PROMOTIONID VARCHAR(50) DEFAULT NULL,
  ALLPRODUCTS BIT(1) DEFAULT b'0',
  MANAGESTOCK BIT(1) DEFAULT b'1',
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 334,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `PRODUCTS_INX_0` on table `products`
--
ALTER TABLE products 
  ADD UNIQUE INDEX PRODUCTS_INX_0(REFERENCE);

--
-- Create index `PRODUCTS_INX_1` on table `products`
--
ALTER TABLE products 
  ADD UNIQUE INDEX PRODUCTS_INX_1(CODE);

--
-- Create index `PRODUCTS_NAME_INX` on table `products`
--
ALTER TABLE products 
  ADD INDEX PRODUCTS_NAME_INX(NAME);

--
-- Create foreign key
--
ALTER TABLE products 
  ADD CONSTRAINT FK_PRODUCT_PROMOTIONID FOREIGN KEY (PROMOTIONID)
    REFERENCES promotions(ID);

--
-- Create foreign key
--
ALTER TABLE products 
  ADD CONSTRAINT PRODUCTS_ATTRSET_FK FOREIGN KEY (ATTRIBUTESET_ID)
    REFERENCES attributeset(ID);

--
-- Create foreign key
--
ALTER TABLE products 
  ADD CONSTRAINT PRODUCTS_FK_1 FOREIGN KEY (CATEGORY)
    REFERENCES categories(ID);

--
-- Create foreign key
--
ALTER TABLE products 
  ADD CONSTRAINT PRODUCTS_PACKPRODUCT_FK FOREIGN KEY (PACKPRODUCT)
    REFERENCES products(ID);

--
-- Create foreign key
--
ALTER TABLE products 
  ADD CONSTRAINT PRODUCTS_TAXCAT_FK FOREIGN KEY (TAXCAT)
    REFERENCES taxcategories(ID);

--
-- Create view `view_all_products`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_all_products
AS
SELECT
  `p`.`ID` AS `ID`,
  `p`.`CODE` AS `CODE`,
  `p`.`NAME` AS `NAME`
FROM `products` `p`
ORDER BY `p`.`NAME`;

--
-- Create table `products_kit`
--
CREATE TABLE products_kit (
  ID VARCHAR(255) NOT NULL,
  PRODUCT VARCHAR(255) NOT NULL,
  PRODUCT_KIT VARCHAR(255) NOT NULL,
  QUANTITY DOUBLE NOT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `PKIT_INX_PROD` on table `products_kit`
--
ALTER TABLE products_kit 
  ADD UNIQUE INDEX PKIT_INX_PROD(PRODUCT, PRODUCT_KIT);

--
-- Create foreign key
--
ALTER TABLE products_kit 
  ADD CONSTRAINT PRODUCTS_KIT_FK_1 FOREIGN KEY (PRODUCT)
    REFERENCES products(ID);

--
-- Create foreign key
--
ALTER TABLE products_kit 
  ADD CONSTRAINT PRODUCTS_KIT_FK_2 FOREIGN KEY (PRODUCT_KIT)
    REFERENCES products(ID);

--
-- Create table `products_com`
--
CREATE TABLE products_com (
  ID VARCHAR(255) NOT NULL,
  PRODUCT VARCHAR(255) NOT NULL,
  PRODUCT2 VARCHAR(255) NOT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID, PRODUCT, PRODUCT2)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `PCOM_INX_PROD` on table `products_com`
--
ALTER TABLE products_com 
  ADD UNIQUE INDEX PCOM_INX_PROD(PRODUCT, PRODUCT2);

--
-- Create foreign key
--
ALTER TABLE products_com 
  ADD CONSTRAINT PRODUCTS_COM_FK_1 FOREIGN KEY (PRODUCT)
    REFERENCES products(ID);

--
-- Create foreign key
--
ALTER TABLE products_com 
  ADD CONSTRAINT PRODUCTS_COM_FK_2 FOREIGN KEY (PRODUCT2)
    REFERENCES products(ID);

--
-- Create table `attributesetinstance`
--
CREATE TABLE attributesetinstance (
  ID VARCHAR(255) NOT NULL,
  ATTRIBUTESET_ID VARCHAR(255) NOT NULL,
  DESCRIPTION VARCHAR(255) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create foreign key
--
ALTER TABLE attributesetinstance 
  ADD CONSTRAINT ATTSETINST_SET FOREIGN KEY (ATTRIBUTESET_ID)
    REFERENCES attributeset(ID) ON DELETE CASCADE;

--
-- Create table `ticketlines`
--
CREATE TABLE ticketlines (
  TICKET VARCHAR(255) NOT NULL,
  LINE INT(11) NOT NULL,
  PRODUCT VARCHAR(255) DEFAULT NULL,
  ATTRIBUTESETINSTANCE_ID VARCHAR(255) DEFAULT NULL,
  UNITS DOUBLE NOT NULL,
  PRICE DOUBLE NOT NULL,
  TAXID VARCHAR(255) NOT NULL,
  ATTRIBUTES MEDIUMBLOB DEFAULT NULL,
  REFUNDQTY DOUBLE DEFAULT 0,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (TICKET, LINE)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 1643,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create foreign key
--
ALTER TABLE ticketlines 
  ADD CONSTRAINT TICKETLINES_ATTSETINST FOREIGN KEY (ATTRIBUTESETINSTANCE_ID)
    REFERENCES attributesetinstance(ID);

--
-- Create foreign key
--
ALTER TABLE ticketlines 
  ADD CONSTRAINT TICKETLINES_FK_2 FOREIGN KEY (PRODUCT)
    REFERENCES products(ID);

--
-- Create foreign key
--
ALTER TABLE ticketlines 
  ADD CONSTRAINT TICKETLINES_FK_3 FOREIGN KEY (TAXID)
    REFERENCES taxes(ID);

--
-- Create foreign key
--
ALTER TABLE ticketlines 
  ADD CONSTRAINT TICKETLINES_FK_TICKET FOREIGN KEY (TICKET)
    REFERENCES tickets(ID);

DELIMITER $$

--
-- Create procedure `STATIONERYPROFITMONTHLY`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE STATIONERYPROFITMONTHLY(IN in_DATE1 VARCHAR(10),IN in_DATE2 VARCHAR(10))
BEGIN
  IF ((in_DATE1 IS NOT NULL OR in_DATE1 <> '') AND (in_DATE2 IS NOT NULL OR in_DATE2 <> '')) THEN
-- Date Range
SELECT
  DATE_FORMAT(RECEIPTS.DATENEW, "%M/%Y") AS TDATE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES TICKETLINES
  INNER JOIN receipts
    ON receipts.ID = ticketlines.TICKET
    AND DATE_FORMAT(receipts.DATENEW, "%Y-%m") BETWEEN DATE_FORMAT(STR_TO_DATE(in_DATE1, '%d/%m/%Y'), "%Y-%m")
    AND DATE_FORMAT(STR_TO_DATE(in_DATE2, '%d/%m/%Y'), "%Y-%m")
  INNER JOIN products
    ON products.ID = TICKETLINES.PRODUCT
    AND products.CATEGORY NOT IN (SELECT
        id
      FROM categories
      WHERE NAME = 'Internet Services')
  INNER JOIN tickets
    ON TICKETLINES.TICKET = tickets.ID
    AND tickets.TICKETTYPE = 0
GROUP BY YEAR(receipts.DATENEW),
         MONTH(receipts.DATENEW)
ORDER BY YEAR(receipts.DATENEW), MONTH(receipts.DATENEW);
ELSEIF ((in_DATE1 IS NOT NULL
  OR in_DATE1 != '')
  AND (in_DATE2 IS NULL
  OR in_DATE2 = '')) THEN
-- Specific Date
SELECT
  DATE_FORMAT(RECEIPTS.DATENEW, "%M/%Y") AS TDATE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES TICKETLINES
  INNER JOIN receipts
    ON receipts.ID = ticketlines.TICKET
    AND DATE_FORMAT(receipts.DATENEW, "%Y-%m") = DATE_FORMAT(STR_TO_DATE(in_DATE1, '%d/%m/%Y'), "%Y-%m")
  INNER JOIN products
    ON products.ID = TICKETLINES.PRODUCT
    AND products.CATEGORY NOT IN (SELECT
        id
      FROM categories
      WHERE NAME = 'Internet Services')
  INNER JOIN tickets
    ON TICKETLINES.TICKET = tickets.ID
    AND tickets.TICKETTYPE = 0
GROUP BY YEAR(receipts.DATENEW),
         MONTH(receipts.DATENEW)
ORDER BY YEAR(receipts.DATENEW), MONTH(receipts.DATENEW);
ELSEIF ((in_DATE1 IS NULL
  OR in_DATE1 = '')
  AND (in_DATE2 IS NULL
  OR in_DATE2 = '')) THEN
-- No Date (Till Date)
SELECT
  DATE_FORMAT(RECEIPTS.DATENEW, "%M/%Y") AS TDATE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES TICKETLINES
  INNER JOIN receipts
    ON receipts.ID = ticketlines.TICKET
  INNER JOIN products
    ON products.ID = TICKETLINES.PRODUCT
    AND products.CATEGORY NOT IN (SELECT
        id
      FROM categories
      WHERE NAME = 'Internet Services')
  INNER JOIN tickets
    ON TICKETLINES.TICKET = tickets.ID
    AND tickets.TICKETTYPE = 0
GROUP BY YEAR(receipts.DATENEW),
         MONTH(receipts.DATENEW)
ORDER BY YEAR(receipts.DATENEW), MONTH(receipts.DATENEW);
END IF;
END
$$

--
-- Create procedure `SALESPROFITMONTHLY`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE SALESPROFITMONTHLY(IN in_DATE1 VARCHAR(10),IN in_DATE2 VARCHAR(10))
BEGIN
  IF ((in_DATE1 IS NOT NULL OR in_DATE1 <> '') AND (in_DATE2 IS NOT NULL OR in_DATE2 <> '')) THEN
-- Date Range
SELECT
  DATE_FORMAT(RECEIPTS.DATENEW, "%M/%Y") AS TDATE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES TICKETLINES
  INNER JOIN receipts
    ON receipts.ID = ticketlines.TICKET
    AND DATE_FORMAT(receipts.DATENEW, "%Y-%m") BETWEEN DATE_FORMAT(STR_TO_DATE(in_DATE1, '%d/%m/%Y'), "%Y-%m")
    AND DATE_FORMAT(STR_TO_DATE(in_DATE2, '%d/%m/%Y'), "%Y-%m")
  INNER JOIN products
    ON products.ID = TICKETLINES.PRODUCT
  INNER JOIN tickets
    ON TICKETLINES.TICKET = tickets.ID
    AND tickets.TICKETTYPE = 0
GROUP BY YEAR(receipts.DATENEW),
         MONTH(receipts.DATENEW)
ORDER BY YEAR(receipts.DATENEW), MONTH(receipts.DATENEW);
ELSEIF ((in_DATE1 IS NOT NULL
  OR in_DATE1 != '')
  AND (in_DATE2 IS NULL
  OR in_DATE2 = '')) THEN
-- Specific Date
SELECT
  DATE_FORMAT(RECEIPTS.DATENEW, "%M/%Y") AS TDATE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES TICKETLINES
  INNER JOIN receipts
    ON receipts.ID = ticketlines.TICKET
    AND DATE_FORMAT(receipts.DATENEW, "%Y-%m") = DATE_FORMAT(STR_TO_DATE(in_DATE1, '%d/%m/%Y'), "%Y-%m")
  INNER JOIN products
    ON products.ID = TICKETLINES.PRODUCT
  INNER JOIN tickets
    ON TICKETLINES.TICKET = tickets.ID
    AND tickets.TICKETTYPE = 0
GROUP BY YEAR(receipts.DATENEW),
         MONTH(receipts.DATENEW)
ORDER BY YEAR(receipts.DATENEW), MONTH(receipts.DATENEW);
ELSEIF ((in_DATE1 IS NULL
  OR in_DATE1 = '')
  AND (in_DATE2 IS NULL
  OR in_DATE2 = '')) THEN
-- No Date (Till Date)
SELECT
  DATE_FORMAT(RECEIPTS.DATENEW, "%M/%Y") AS TDATE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES TICKETLINES
  INNER JOIN receipts
    ON receipts.ID = ticketlines.TICKET
  INNER JOIN products
    ON products.ID = TICKETLINES.PRODUCT
  INNER JOIN tickets
    ON TICKETLINES.TICKET = tickets.ID
    AND tickets.TICKETTYPE = 0
GROUP BY YEAR(receipts.DATENEW),
         MONTH(receipts.DATENEW)
ORDER BY YEAR(receipts.DATENEW), MONTH(receipts.DATENEW);
END IF;
END
$$

--
-- Create procedure `SALESPROFITDATE`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE SALESPROFITDATE(IN in_DATE1 VARCHAR(10),IN in_DATE2 VARCHAR(10))
BEGIN
  IF ((in_DATE1 IS NOT NULL OR in_DATE1 <> '') AND (in_DATE2 IS NOT NULL OR in_DATE2 <> '')) THEN
-- SELECT 'DATE 1 AND 2 ARE NOT EMPTY' AS RESULTS; 
--          WHERE DATE(STOCKDIARY.DATENEW) BETWEEN in_DATE1 AND in_DATE2
SELECT
  PRODUCTS.REFERENCE,
  PRODUCTS.NAME,
  DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y") AS TDATE,
  -- '00:00:00' AS TTIME, -- DATE_FORMAT(RECEIPTS.DATENEW,"%h:%i:%s %p") AS TTIME,
  PRODUCTS.PRICEBUY,
  PRODUCTS.PRICESELL,
  SUM(TICKETLINES.UNITS) AS SOLD_UNITS,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL)
  - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES -- TICKETLINES 
  INNER JOIN products
    ON products.ID = ticketlines.PRODUCT
  INNER JOIN receipts
    ON receipts.ID = ticketlines.TICKET
  INNER JOIN tickets
    ON TICKETS.ID = ticketlines.TICKET
    AND TICKETS.TICKETTYPE = 0
WHERE ticketlines.ticket IN (SELECT
    receipts.id
  FROM receipts
  WHERE receipts.DATENEW BETWEEN STR_TO_DATE(in_DATE1, '%d/%m/%Y') AND DATE_ADD(STR_TO_DATE(in_DATE2, '%d/%m/%Y'), INTERVAL 1 DAY))
-- and ticketlines.product='8709da74-5e71-4d8d-b91b-0cf299103222'
GROUP BY DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y"),
         TICKETLINES.PRODUCT
ORDER BY RECEIPTS.DATENEW, PRODUCTS.NAME;
ELSEIF ((in_DATE1 IS NOT NULL
  OR in_DATE1 != '')
  AND (in_DATE2 IS NULL
  OR in_DATE2 = '')) THEN
-- SELECT 'DATE 1 IS NOT EMPTY, DATE2 IS EMPTY' AS RESULTS;
SELECT
  PRODUCTS.REFERENCE,
  PRODUCTS.NAME,
  DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y") AS TDATE,
  -- '00:00:00' AS TTIME, -- DATE_FORMAT(RECEIPTS.DATENEW,"%h:%i:%s %p") AS TTIME,
  PRODUCTS.PRICEBUY,
  PRODUCTS.PRICESELL,
  SUM(TICKETLINES.UNITS) AS SOLD_UNITS,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL)
  - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES -- TICKETLINES 
  INNER JOIN products
    ON products.ID = ticketlines.PRODUCT
  INNER JOIN receipts
    ON receipts.ID = ticketlines.TICKET
  INNER JOIN tickets
    ON TICKETS.ID = ticketlines.TICKET
    AND TICKETS.TICKETTYPE = 0
WHERE ticketlines.ticket IN (SELECT
    receipts.id
  FROM receipts
  WHERE YEAR(RECEIPTS.DATENEW) = YEAR(STR_TO_DATE(in_DATE1, "%d/%m/%Y"))
  AND MONTH(RECEIPTS.DATENEW) = MONTH(STR_TO_DATE(in_DATE1, "%d/%m/%Y"))
  AND DAY(RECEIPTS.DATENEW) = DAY(STR_TO_DATE(in_DATE1, "%d/%m/%Y")))
-- and ticketlines.product='8709da74-5e71-4d8d-b91b-0cf299103222'
GROUP BY TICKETLINES.PRODUCT -- ,STOCKDIARY.DATENEW      
ORDER BY DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y"), PRODUCTS.NAME ASC;
ELSEIF ((in_DATE1 IS NULL
  OR in_DATE1 = '')
  AND (in_DATE2 IS NULL
  OR in_DATE2 = '')) THEN
-- 'DATE 1 IS EMPTY, DATE2 IS EMPTY' AS RESULTS;
SELECT
  PRODUCTS.REFERENCE,
  PRODUCTS.NAME,
  DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y") AS TDATE,
  -- '00:00:00' AS TTIME, -- DATE_FORMAT(RECEIPTS.DATENEW,"%h:%i:%s %p") AS TTIME,
  PRODUCTS.PRICEBUY,
  PRODUCTS.PRICESELL,
  SUM(TICKETLINES.UNITS) AS SOLD_UNITS,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL)
  - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES -- TICKETLINES 
  INNER JOIN products
    ON products.ID = ticketlines.PRODUCT
  INNER JOIN receipts
    ON receipts.ID = ticketlines.TICKET
  INNER JOIN tickets
    ON TICKETS.ID = ticketlines.TICKET
    AND TICKETS.TICKETTYPE = 0
WHERE ticketlines.ticket IN (SELECT
    receipts.id
  FROM receipts) -- where DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y")=in_DATE1) 
-- and ticketlines.product='8709da74-5e71-4d8d-b91b-0cf299103222'
GROUP BY DATE_FORMAT(RECEIPTS.DATENEW, "%d/%m/%Y"),
         TICKETLINES.PRODUCT -- ,STOCKDIARY.DATENEW      
ORDER BY RECEIPTS.DATENEW, PRODUCTS.NAME ASC;
END IF;
END
$$

--
-- Create procedure `INTERNETPROFITMONTHLY`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE INTERNETPROFITMONTHLY(IN in_DATE1 VARCHAR(10),IN in_DATE2 VARCHAR(10))
BEGIN
  IF ((in_DATE1 IS NOT NULL OR in_DATE1 <> '') AND (in_DATE2 IS NOT NULL OR in_DATE2 <> '')) THEN
-- Date Range
SELECT
  DATE_FORMAT(RECEIPTS.DATENEW, "%M/%Y") AS TDATE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES TICKETLINES
  INNER JOIN receipts
    ON receipts.ID = ticketlines.TICKET
    AND DATE_FORMAT(receipts.DATENEW, "%Y-%m") BETWEEN DATE_FORMAT(STR_TO_DATE(in_DATE1, '%d/%m/%Y'), "%Y-%m")
    AND DATE_FORMAT(STR_TO_DATE(in_DATE2, '%d/%m/%Y'), "%Y-%m")
  INNER JOIN products
    ON products.ID = TICKETLINES.PRODUCT
    AND products.CATEGORY IN (SELECT
        id
      FROM categories
      WHERE NAME = 'Internet Services')
  INNER JOIN tickets
    ON TICKETLINES.TICKET = tickets.ID
    AND tickets.TICKETTYPE = 0
GROUP BY YEAR(receipts.DATENEW),
         MONTH(receipts.DATENEW)
ORDER BY YEAR(receipts.DATENEW), MONTH(receipts.DATENEW);
ELSEIF ((in_DATE1 IS NOT NULL
  OR in_DATE1 != '')
  AND (in_DATE2 IS NULL
  OR in_DATE2 = '')) THEN
-- Specific Date
SELECT
  DATE_FORMAT(RECEIPTS.DATENEW, "%M/%Y") AS TDATE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES TICKETLINES
  INNER JOIN receipts
    ON receipts.ID = ticketlines.TICKET
    AND DATE_FORMAT(receipts.DATENEW, "%Y-%m") = DATE_FORMAT(STR_TO_DATE(in_DATE1, '%d/%m/%Y'), "%Y-%m")
  INNER JOIN products
    ON products.ID = TICKETLINES.PRODUCT
    AND products.CATEGORY IN (SELECT
        id
      FROM categories
      WHERE NAME = 'Internet Services')
  INNER JOIN tickets
    ON TICKETLINES.TICKET = tickets.ID
    AND tickets.TICKETTYPE = 0
GROUP BY YEAR(receipts.DATENEW),
         MONTH(receipts.DATENEW)
ORDER BY YEAR(receipts.DATENEW), MONTH(receipts.DATENEW);
ELSEIF ((in_DATE1 IS NULL
  OR in_DATE1 = '')
  AND (in_DATE2 IS NULL
  OR in_DATE2 = '')) THEN
-- No Date (Till Date)
SELECT
  DATE_FORMAT(RECEIPTS.DATENEW, "%M/%Y") AS TDATE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY) AS COST_VALUE,
  SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) AS EXPECTED_SALES_VALUE,
  SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) AS ACTUAL_SALES_VALUE,
  (SUM(TICKETLINES.UNITS * PRODUCTS.PRICESELL) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS EXPECTED_PROFIT,
  (SUM(TICKETLINES.PRICE * TICKETLINES.UNITS) - SUM(TICKETLINES.UNITS * PRODUCTS.PRICEBUY)) AS ACTUAL_PROFIT
FROM TICKETLINES TICKETLINES
  INNER JOIN receipts
    ON receipts.ID = ticketlines.TICKET
  INNER JOIN products
    ON products.ID = TICKETLINES.PRODUCT
    AND products.CATEGORY IN (SELECT
        id
      FROM categories
      WHERE NAME = 'Internet Services')
  INNER JOIN tickets
    ON TICKETLINES.TICKET = tickets.ID
    AND tickets.TICKETTYPE = 0
GROUP BY YEAR(receipts.DATENEW),
         MONTH(receipts.DATENEW)
ORDER BY YEAR(receipts.DATENEW), MONTH(receipts.DATENEW);
END IF;
END
$$

DELIMITER ;

--
-- Create view `view_yearly_total_sales`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_yearly_total_sales
AS
SELECT
  SUM((`ticketlines`.`PRICE` * `ticketlines`.`UNITS`)) AS `ACTUAL_SALES_VALUE`,
  YEAR(`receipts`.`DATENEW`) AS `oYear`
FROM (((`ticketlines`
  JOIN `products`
    ON ((`products`.`ID` = `ticketlines`.`PRODUCT`)))
  JOIN `receipts`
    ON ((`receipts`.`ID` = `ticketlines`.`TICKET`)))
  JOIN `tickets`
    ON (((`tickets`.`ID` = `ticketlines`.`TICKET`)
    AND (`tickets`.`TICKETTYPE` = 0))))
WHERE `ticketlines`.`TICKET` IN (SELECT
    `receipts`.`ID`
  FROM `receipts`)
GROUP BY YEAR(`receipts`.`DATENEW`)
ORDER BY YEAR(`receipts`.`DATENEW`);

--
-- Create view `view_yearly_total_profit`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_yearly_total_profit
AS
SELECT
  (SUM((`ticketlines`.`PRICE` * `ticketlines`.`UNITS`)) - SUM((`ticketlines`.`UNITS` * `products`.`PRICEBUY`))) AS `ACTUAL_PROFIT`,
  YEAR(`receipts`.`DATENEW`) AS `oYear`
FROM (((`ticketlines`
  JOIN `products`
    ON ((`products`.`ID` = `ticketlines`.`PRODUCT`)))
  JOIN `receipts`
    ON ((`receipts`.`ID` = `ticketlines`.`TICKET`)))
  JOIN `tickets`
    ON (((`tickets`.`ID` = `ticketlines`.`TICKET`)
    AND (`tickets`.`TICKETTYPE` = 0))))
WHERE `ticketlines`.`TICKET` IN (SELECT
    `receipts`.`ID`
  FROM `receipts`)
GROUP BY YEAR(`receipts`.`DATENEW`)
ORDER BY YEAR(`receipts`.`DATENEW`);

--
-- Create view `view_all_ticketlines_v2`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_all_ticketlines_v2
AS
SELECT
  `t`.`TICKETID` AS `TICKETID`,
  `p`.`CODE` AS `PCODE`,
  `p`.`NAME` AS `PRODUCT`,
  (`tl`.`LINE` + 1) AS `LINEITEM`,
  `tl`.`UNITS` AS `QTY`,
  `tl`.`PRICE` AS `UNITPRICE`,
  (`tl`.`UNITS` * `tl`.`PRICE`) AS `TOTAL`
FROM ((`tickets` `t`
  JOIN `ticketlines` `tl`
    ON ((`tl`.`TICKET` = `t`.`ID`)))
  JOIN `products` `p`
    ON ((`p`.`ID` = `tl`.`PRODUCT`)))
WHERE (`t`.`TICKETTYPE` = 0);

--
-- Create view `view_all_ticketlines`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_all_ticketlines
AS
SELECT
  `t`.`TICKETID` AS `TICKETID`,
  `p`.`NAME` AS `PRODUCT`,
  (`tl`.`LINE` + 1) AS `LINEITEM`,
  `tl`.`UNITS` AS `QTY`,
  `tl`.`PRICE` AS `UNITPRICE`,
  (`tl`.`UNITS` * `tl`.`PRICE`) AS `TOTAL`
FROM ((`tickets` `t`
  JOIN `ticketlines` `tl`
    ON ((`tl`.`TICKET` = `t`.`ID`)))
  JOIN `products` `p`
    ON ((`p`.`ID` = `tl`.`PRODUCT`)))
WHERE (`t`.`TICKETTYPE` = 0);

--
-- Create view `view_all_invoices`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_all_invoices
AS
SELECT DISTINCT
  `t`.`TICKETID` AS `TICKETID`,
  `c`.`NAME` AS `NAME`,
  SUM((`tl`.`UNITS` * `tl`.`PRICE`)) AS `INVAMOUNT`,
  `r`.`DATENEW` AS `INVDATE`,
  `p`.`PAYMENT` AS `PAYMETHOD`
FROM ((((`tickets` `t`
  JOIN `customers` `c`
    ON ((`c`.`ID` = `t`.`CUSTOMER`)))
  JOIN `ticketlines` `tl`
    ON ((`tl`.`TICKET` = `t`.`ID`)))
  JOIN `receipts` `r`
    ON ((`r`.`ID` = `tl`.`TICKET`)))
  JOIN `payments` `p`
    ON ((`p`.`RECEIPT` = `t`.`ID`)))
WHERE (`t`.`TICKETTYPE` = 0)
GROUP BY `t`.`TICKETID`
ORDER BY `t`.`TICKETID`;

--
-- Create view `view_yearly_sales_all_cash`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_yearly_sales_all_cash
AS
SELECT
  SUM(`b`.`INVAMOUNT`) AS `INVAMOUNTAB`,
  YEAR(`b`.`INVDATE`) AS `INVDATEAB`
FROM `view_all_invoices` `b`
GROUP BY `b`.`INVAMOUNT`,
         YEAR(`b`.`INVDATE`);

--
-- Create view `view_monthly_sales_all_cash`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_monthly_sales_all_cash
AS
SELECT
  SUM(`b`.`INVAMOUNT`) AS `INVAMOUNTAB`,
  `b`.`INVDATE` AS `INVDATEAB`
FROM `view_all_invoices` `b`
GROUP BY `b`.`INVAMOUNT`,
         YEAR(`b`.`INVDATE`),
         MONTH(`b`.`INVDATE`)
ORDER BY `INVDATEAB`;

--
-- Create view `view_current_month_cash_sales`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_current_month_cash_sales
AS
SELECT
  SUM(`view_monthly_sales_all_cash`.`INVAMOUNTAB`) AS `INVAMOUNT`,
  DATE_FORMAT(`view_monthly_sales_all_cash`.`INVDATEAB`, '%M-%Y') AS `INVDATE`
FROM `view_monthly_sales_all_cash`
WHERE (MONTH(`view_monthly_sales_all_cash`.`INVDATEAB`) = MONTH(NOW()))
GROUP BY YEAR(`view_monthly_sales_all_cash`.`INVDATEAB`),
         MONTH(`view_monthly_sales_all_cash`.`INVDATEAB`);

--
-- Create view `view_customer_item_search`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_customer_item_search
AS
SELECT
  `vai`.`TICKETID` AS `TICKETID`,
  `vai`.`NAME` AS `NAME`,
  `vat`.`PRODUCT` AS `PRODUCT`,
  `vat`.`QTY` AS `QTY`,
  `vat`.`UNITPRICE` AS `UNITPRICE`,
  `vat`.`TOTAL` AS `TOTAL`,
  `vai`.`INVDATE` AS `INVDATE`,
  `vai`.`INVAMOUNT` AS `INVAMOUNT`
FROM (`view_all_invoices` `vai`
  JOIN `view_all_ticketlines` `vat`
    ON ((`vat`.`TICKETID` = `vai`.`TICKETID`)))
ORDER BY `vai`.`INVDATE` DESC, `vai`.`NAME`, `vat`.`PRODUCT`;

--
-- Create view `view_all_cash_customers`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_all_cash_customers
AS
SELECT DISTINCT
  `t`.`TICKETID` AS `TICKETID`,
  'Cash Customer' AS `NAME`,
  SUM((`tl`.`UNITS` * `tl`.`PRICE`)) AS `INVAMOUNT`,
  `r`.`DATENEW` AS `INVDATE`,
  `p`.`PAYMENT` AS `PAYMETHOD`
FROM (((`tickets` `t`
  JOIN `ticketlines` `tl`
    ON ((`tl`.`TICKET` = `t`.`ID`)))
  JOIN `receipts` `r`
    ON ((`r`.`ID` = `tl`.`TICKET`)))
  JOIN `payments` `p`
    ON ((`p`.`RECEIPT` = `t`.`ID`)))
WHERE ((`t`.`TICKETTYPE` = 0)
AND ISNULL(`t`.`CUSTOMER`))
GROUP BY `t`.`TICKETID`
ORDER BY `INVDATE` DESC, `t`.`TICKETID`;

--
-- Create view `view_yearly_sales_all_customers`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_yearly_sales_all_customers
AS
SELECT
  SUM(`a`.`INVAMOUNT`) AS `INVAMOUNTAB`,
  YEAR(`a`.`INVDATE`) AS `INVDATEAB`
FROM `view_all_cash_customers` `a`
GROUP BY `a`.`INVAMOUNT`,
         YEAR(`a`.`INVDATE`);

--
-- Create view `view_yearly_sales_all`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_yearly_sales_all
AS
SELECT
  `view_yearly_sales_all_customers`.`INVAMOUNTAB` AS `INVAMOUNTAB`,
  `view_yearly_sales_all_customers`.`INVDATEAB` AS `INVDATEAB`
FROM `view_yearly_sales_all_customers` UNION ALL SELECT
  `view_yearly_sales_all_cash`.`INVAMOUNTAB` AS `INVAMOUNTAB`,
  `view_yearly_sales_all_cash`.`INVDATEAB` AS `INVDATEAB`
FROM `view_yearly_sales_all_cash`;

--
-- Create view `view_monthly_sales_all_customers`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_monthly_sales_all_customers
AS
SELECT
  SUM(`a`.`INVAMOUNT`) AS `INVAMOUNTAB`,
  `a`.`INVDATE` AS `INVDATEAB`
FROM `view_all_cash_customers` `a`
GROUP BY `a`.`INVAMOUNT`,
         YEAR(`a`.`INVDATE`),
         MONTH(`a`.`INVDATE`)
ORDER BY `INVDATEAB`;

--
-- Create view `view_monthly_sales_all`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_monthly_sales_all
AS
SELECT
  SUM(`view_monthly_sales_all_customers`.`INVAMOUNTAB`) AS `INVAMOUNT`,
  DATE_FORMAT(`view_monthly_sales_all_customers`.`INVDATEAB`, '%M-%Y') AS `INVDATE`
FROM `view_monthly_sales_all_customers`
GROUP BY YEAR(`view_monthly_sales_all_customers`.`INVDATEAB`),
         MONTH(`view_monthly_sales_all_customers`.`INVDATEAB`) UNION ALL SELECT
  SUM(`view_monthly_sales_all_cash`.`INVAMOUNTAB`) AS `INVAMOUNT`,
  DATE_FORMAT(`view_monthly_sales_all_cash`.`INVDATEAB`, '%M-%Y') AS `INVDATE`
FROM `view_monthly_sales_all_cash`
GROUP BY YEAR(`view_monthly_sales_all_cash`.`INVDATEAB`),
         MONTH(`view_monthly_sales_all_cash`.`INVDATEAB`);

--
-- Create view `view_current_month_cust_sales`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_current_month_cust_sales
AS
SELECT
  SUM(`view_monthly_sales_all_customers`.`INVAMOUNTAB`) AS `INVAMOUNT`,
  DATE_FORMAT(`view_monthly_sales_all_customers`.`INVDATEAB`, '%M-%Y') AS `INVDATE`
FROM `view_monthly_sales_all_customers`
WHERE (MONTH(`view_monthly_sales_all_customers`.`INVDATEAB`) = MONTH(NOW()))
GROUP BY YEAR(`view_monthly_sales_all_customers`.`INVDATEAB`),
         MONTH(`view_monthly_sales_all_customers`.`INVDATEAB`);

--
-- Create view `view_cash_receipt_item_search`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_cash_receipt_item_search
AS
SELECT
  `vaci`.`TICKETID` AS `TICKETID`,
  `vaci`.`NAME` AS `NAME`,
  `vat`.`PRODUCT` AS `PRODUCT`,
  `vat`.`QTY` AS `QTY`,
  `vat`.`UNITPRICE` AS `UNITPRICE`,
  `vat`.`TOTAL` AS `TOTAL`,
  `vaci`.`INVDATE` AS `INVDATE`,
  `vaci`.`INVAMOUNT` AS `INVAMOUNT`
FROM (`view_all_cash_customers` `vaci`
  JOIN `view_all_ticketlines` `vat`
    ON ((`vat`.`TICKETID` = `vaci`.`TICKETID`)))
ORDER BY `vaci`.`INVDATE` DESC, `vaci`.`NAME`, `vat`.`PRODUCT`;

--
-- Create view `tilldateprofititemwise`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW tilldateprofititemwise
AS
SELECT
  `products`.`REFERENCE` AS `REFERENCE`,
  `products`.`NAME` AS `NAME`,
  `products`.`PRICEBUY` AS `PRICEBUY`,
  `products`.`PRICESELL` AS `PRICESELL`,
  SUM(`ticketlines`.`UNITS`) AS `SOLD_UNITS`,
  SUM((`ticketlines`.`UNITS` * `products`.`PRICEBUY`)) AS `COST_VALUE`,
  SUM((`ticketlines`.`UNITS` * `products`.`PRICESELL`)) AS `EXPECTED_SALES_VALUE`,
  SUM((`ticketlines`.`PRICE` * `ticketlines`.`UNITS`)) AS `ACTUAL_SALES_VALUE`,
  (SUM((`ticketlines`.`UNITS` * `products`.`PRICESELL`)) - SUM((`ticketlines`.`UNITS` * `products`.`PRICEBUY`))) AS `EXPECTED_PROFIT`,
  (SUM((`ticketlines`.`PRICE` * `ticketlines`.`UNITS`)) - SUM((`ticketlines`.`UNITS` * `products`.`PRICEBUY`))) AS `ACTUAL_PROFIT`
FROM (((`ticketlines`
  JOIN `products`
    ON ((`products`.`ID` = `ticketlines`.`PRODUCT`)))
  JOIN `receipts`
    ON ((`receipts`.`ID` = `ticketlines`.`TICKET`)))
  JOIN `tickets`
    ON (((`tickets`.`ID` = `ticketlines`.`TICKET`)
    AND (`tickets`.`TICKETTYPE` = 0))))
WHERE `ticketlines`.`TICKET` IN (SELECT
    `receipts`.`ID`
  FROM `receipts`)
GROUP BY `ticketlines`.`PRODUCT`
ORDER BY `receipts`.`DATENEW`, `products`.`NAME`;

--
-- Create table `locations`
--
CREATE TABLE locations (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  ADDRESS VARCHAR(255) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `LOCATIONS_NAME_INX` on table `locations`
--
ALTER TABLE locations 
  ADD UNIQUE INDEX LOCATIONS_NAME_INX(NAME);

--
-- Create table `stocklevel`
--
CREATE TABLE stocklevel (
  ID VARCHAR(255) NOT NULL,
  LOCATION VARCHAR(255) NOT NULL,
  PRODUCT VARCHAR(255) NOT NULL,
  STOCKSECURITY DOUBLE NOT NULL,
  STOCKMAXIMUM DOUBLE NOT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create foreign key
--
ALTER TABLE stocklevel 
  ADD CONSTRAINT STOCKLEVEL_LOCATION FOREIGN KEY (LOCATION)
    REFERENCES locations(ID);

--
-- Create foreign key
--
ALTER TABLE stocklevel 
  ADD CONSTRAINT STOCKLEVEL_PRODUCT FOREIGN KEY (PRODUCT)
    REFERENCES products(ID);

--
-- Create table `stockdiary`
--
CREATE TABLE stockdiary (
  ID VARCHAR(255) NOT NULL,
  DATENEW TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  REASON INT(11) NOT NULL,
  LOCATION VARCHAR(255) NOT NULL,
  PRODUCT VARCHAR(255) NOT NULL,
  ATTRIBUTESETINSTANCE_ID VARCHAR(255) DEFAULT NULL,
  UNITS DOUBLE NOT NULL,
  PRICE DOUBLE NOT NULL,
  APPUSER VARCHAR(255) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 313,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `STOCKDIARY_INX_1` on table `stockdiary`
--
ALTER TABLE stockdiary 
  ADD INDEX STOCKDIARY_INX_1(DATENEW);

--
-- Create foreign key
--
ALTER TABLE stockdiary 
  ADD CONSTRAINT STOCKDIARY_ATTSETINST FOREIGN KEY (ATTRIBUTESETINSTANCE_ID)
    REFERENCES attributesetinstance(ID);

--
-- Create foreign key
--
ALTER TABLE stockdiary 
  ADD CONSTRAINT STOCKDIARY_FK_1 FOREIGN KEY (PRODUCT)
    REFERENCES products(ID);

--
-- Create foreign key
--
ALTER TABLE stockdiary 
  ADD CONSTRAINT STOCKDIARY_FK_2 FOREIGN KEY (LOCATION)
    REFERENCES locations(ID);

--
-- Create view `view_profit_till_date_monthly`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_profit_till_date_monthly
AS
SELECT
  DATE_FORMAT(`stockdiary`.`DATENEW`, '%M/%Y') AS `TDATE`,
  SUM((`ticketlines`.`UNITS` * `products`.`PRICEBUY`)) AS `COST_VALUE`,
  SUM((`ticketlines`.`UNITS` * `products`.`PRICESELL`)) AS `EXPECTED_SALES_VALUE`,
  SUM((`ticketlines`.`PRICE` * `ticketlines`.`UNITS`)) AS `ACTUAL_SALES_VALUE`,
  (SUM((`ticketlines`.`UNITS` * `products`.`PRICESELL`)) - SUM((`ticketlines`.`UNITS` * `products`.`PRICEBUY`))) AS `EXPECTED_PROFIT`,
  (SUM((`ticketlines`.`PRICE` * `ticketlines`.`UNITS`)) - SUM((`ticketlines`.`UNITS` * `products`.`PRICEBUY`))) AS `ACTUAL_PROFIT`
FROM (((`ticketlines`
  JOIN `receipts`
    ON ((`ticketlines`.`TICKET` = `receipts`.`ID`)))
  JOIN `products`
    ON ((`ticketlines`.`PRODUCT` = `products`.`ID`)))
  JOIN `stockdiary`
    ON (((`stockdiary`.`PRODUCT` = `products`.`ID`)
    AND (`stockdiary`.`DATENEW` = `receipts`.`DATENEW`))))
GROUP BY DATE_FORMAT(`stockdiary`.`DATENEW`, '%M/%Y')
ORDER BY `TDATE`, `products`.`NAME`;

--
-- Create view `view_profit_monthly_stationery`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_profit_monthly_stationery
AS
SELECT
  DATE_FORMAT(`stockdiary`.`DATENEW`, '%M/%Y') AS `TDATE`,
  SUM((`ticketlines`.`UNITS` * `products`.`PRICEBUY`)) AS `COST_VALUE`,
  SUM((`ticketlines`.`UNITS` * `products`.`PRICESELL`)) AS `EXPECTED_SALES_VALUE`,
  SUM((`ticketlines`.`PRICE` * `ticketlines`.`UNITS`)) AS `ACTUAL_SALES_VALUE`,
  (SUM((`ticketlines`.`UNITS` * `products`.`PRICESELL`)) - SUM((`ticketlines`.`UNITS` * `products`.`PRICEBUY`))) AS `EXPECTED_PROFIT`,
  (SUM((`ticketlines`.`PRICE` * `ticketlines`.`UNITS`)) - SUM((`ticketlines`.`UNITS` * `products`.`PRICEBUY`))) AS `ACTUAL_PROFIT`
FROM (((`ticketlines`
  JOIN `receipts`
    ON ((`ticketlines`.`TICKET` = `receipts`.`ID`)))
  JOIN `products`
    ON (((`ticketlines`.`PRODUCT` = `products`.`ID`)
    AND (NOT (`products`.`CATEGORY` IN (SELECT
        `categories`.`ID`
      FROM `categories`
      WHERE (`categories`.`NAME` = 'Internet Services')))))))
  JOIN `stockdiary`
    ON (((`stockdiary`.`PRODUCT` = `products`.`ID`)
    AND (`stockdiary`.`DATENEW` = `receipts`.`DATENEW`))))
GROUP BY DATE_FORMAT(`stockdiary`.`DATENEW`, '%M/%Y')
ORDER BY `TDATE`, `products`.`NAME`;

--
-- Create view `view_profit_monthly_internet`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW view_profit_monthly_internet
AS
SELECT
  DATE_FORMAT(`stockdiary`.`DATENEW`, '%M/%Y') AS `TDATE`,
  SUM((`ticketlines`.`UNITS` * `products`.`PRICEBUY`)) AS `COST_VALUE`,
  SUM((`ticketlines`.`UNITS` * `products`.`PRICESELL`)) AS `EXPECTED_SALES_VALUE`,
  SUM((`ticketlines`.`PRICE` * `ticketlines`.`UNITS`)) AS `ACTUAL_SALES_VALUE`,
  (SUM((`ticketlines`.`UNITS` * `products`.`PRICESELL`)) - SUM((`ticketlines`.`UNITS` * `products`.`PRICEBUY`))) AS `EXPECTED_PROFIT`,
  (SUM((`ticketlines`.`PRICE` * `ticketlines`.`UNITS`)) - SUM((`ticketlines`.`UNITS` * `products`.`PRICEBUY`))) AS `ACTUAL_PROFIT`
FROM (((`ticketlines`
  JOIN `receipts`
    ON ((`ticketlines`.`TICKET` = `receipts`.`ID`)))
  JOIN `products`
    ON (((`ticketlines`.`PRODUCT` = `products`.`ID`)
    AND `products`.`CATEGORY` IN (SELECT
        `categories`.`ID`
      FROM `categories`
      WHERE (`categories`.`NAME` = 'Internet Services')))))
  JOIN `stockdiary`
    ON (((`stockdiary`.`PRODUCT` = `products`.`ID`)
    AND (`stockdiary`.`DATENEW` = `receipts`.`DATENEW`))))
GROUP BY DATE_FORMAT(`stockdiary`.`DATENEW`, '%M/%Y')
ORDER BY `TDATE`, `products`.`NAME`;

--
-- Create table `stockcurrent`
--
CREATE TABLE stockcurrent (
  LOCATION VARCHAR(255) NOT NULL,
  PRODUCT VARCHAR(255) NOT NULL,
  ATTRIBUTESETINSTANCE_ID VARCHAR(255) DEFAULT NULL,
  UNITS DOUBLE NOT NULL DEFAULT 0,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 147,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `STOCKCURRENT_INX` on table `stockcurrent`
--
ALTER TABLE stockcurrent 
  ADD UNIQUE INDEX STOCKCURRENT_INX(LOCATION, PRODUCT, ATTRIBUTESETINSTANCE_ID);

--
-- Create foreign key
--
ALTER TABLE stockcurrent 
  ADD CONSTRAINT STOCKCURRENT_ATTSETINST FOREIGN KEY (ATTRIBUTESETINSTANCE_ID)
    REFERENCES attributesetinstance(ID);

--
-- Create foreign key
--
ALTER TABLE stockcurrent 
  ADD CONSTRAINT STOCKCURRENT_FK_1 FOREIGN KEY (PRODUCT)
    REFERENCES products(ID);

--
-- Create foreign key
--
ALTER TABLE stockcurrent 
  ADD CONSTRAINT STOCKCURRENT_FK_2 FOREIGN KEY (LOCATION)
    REFERENCES locations(ID);

DELIMITER $$

--
-- Create procedure `UPLOADPROD`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE UPLOADPROD(IN `in_REF` VARCHAR(255), `in_CODE` VARCHAR(255), `in_NAME` VARCHAR(255), `in_PRICEBUY` DOUBLE, `in_PRICESELL` DOUBLE, `in_CATNAME` VARCHAR(255), `in_TAXCAT` VARCHAR(255), `in_UNITS` DOUBLE)
BEGIN

INSERT IGNORE INTO categories (ID, NAME)
  VALUES (CONVERT(UUID(), char), in_CATNAME);

SELECT
  ID INTO @CATID
FROM categories
WHERE categories.NAME = in_CATNAME;
-- select @CATID;

SET @DISP = concat('<html>',in_NAME);

INSERT INTO products (ID, REFERENCE, CODE, NAME, PRICEBUY, PRICESELL, CATEGORY, TAXCAT, DISPLAY, ALIAS, ISCATALOG)
  VALUES (CONVERT(UUID(), char), in_REF, in_CODE, in_NAME, in_PRICESELL, in_PRICEBUY, @CATID, in_TAXCAT, @DISP, in_NAME, 1);

SELECT
  ID INTO @ProdID
FROM products
WHERE products.CODE = in_CODE;

REPLACE into stockcurrent (LOCATION,PRODUCT,UNITS)
  VALUES (0,@ProdID,in_UNITS);

END
$$

--
-- Create procedure `PRODPURCHASE`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE PRODPURCHASE(IN `in_DATENEW` TIMESTAMP, `in_REASON` INT(11), `in_LOCATION` VARCHAR(255), `in_BARCODE` VARCHAR(255), `in_UNITS` DOUBLE, `in_PRICE` DOUBLE, `in_APPUSER` VARCHAR(255))
BEGIN

-- DECLARE @PID VARCHAR(255);
SELECT
  ID INTO @PID
FROM PRODUCTS
WHERE CODE = in_BARCODE;

INSERT INTO STOCKDIARY (ID, DATENEW, REASON, LOCATION, PRODUCT, UNITS, PRICE, APPUSER)
  VALUES (CONVERT(UUID(), char), in_DATENEW, 1, 0, @PID, in_UNITS, in_PRICE, in_APPUSER);

--    INSERT INTO STOCKDIARY (ID, DATENEW, REASON, LOCATION, PRODUCT, UNITS, PRICE, APPUSER )
--      VALUES( CONVERT(uuid(),CHAR),CURRENT_TIMESTAMP(),1,0,@PID,in_UNITS,in_PRICE,'Administrator');

UPDATE stockcurrent sc
SET sc.UNITS = sc.UNITS + in_UNITS
WHERE SC.PRODUCT = @PID;


END
$$

DELIMITER ;

--
-- Create table `shifts`
--
CREATE TABLE shifts (
  ID VARCHAR(255) NOT NULL,
  STARTSHIFT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  ENDSHIFT TIMESTAMP NULL DEFAULT NULL,
  PPLID VARCHAR(255) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `breaks`
--
CREATE TABLE breaks (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  NOTES VARCHAR(255) DEFAULT NULL,
  VISIBLE BIT(1) NOT NULL DEFAULT b'1',
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `shift_breaks`
--
CREATE TABLE shift_breaks (
  ID VARCHAR(255) NOT NULL,
  SHIFTID VARCHAR(255) NOT NULL,
  BREAKID VARCHAR(255) NOT NULL,
  STARTTIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  ENDTIME TIMESTAMP NULL DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create foreign key
--
ALTER TABLE shift_breaks 
  ADD CONSTRAINT SHIFT_BREAKS_BREAKID FOREIGN KEY (BREAKID)
    REFERENCES breaks(ID);

--
-- Create foreign key
--
ALTER TABLE shift_breaks 
  ADD CONSTRAINT SHIFT_BREAKS_SHIFTID FOREIGN KEY (SHIFTID)
    REFERENCES shifts(ID);

--
-- Create table `reservations`
--
CREATE TABLE reservations (
  ID VARCHAR(255) NOT NULL,
  CREATED TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  DATENEW TIMESTAMP NOT NULL DEFAULT '2012-12-31 22:30:00',
  TITLE VARCHAR(255) NOT NULL,
  CHAIRS INT(11) NOT NULL,
  ISDONE BIT(1) NOT NULL,
  DESCRIPTION VARCHAR(255) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `RESERVATIONS_INX_1` on table `reservations`
--
ALTER TABLE reservations 
  ADD UNIQUE INDEX RESERVATIONS_INX_1(DATENEW);

--
-- Create table `reservation_customers`
--
CREATE TABLE reservation_customers (
  ID VARCHAR(255) NOT NULL,
  CUSTOMER VARCHAR(255) NOT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create foreign key
--
ALTER TABLE reservation_customers 
  ADD CONSTRAINT RES_CUST_FK_1 FOREIGN KEY (ID)
    REFERENCES reservations(ID);

--
-- Create foreign key
--
ALTER TABLE reservation_customers 
  ADD CONSTRAINT RES_CUST_FK_2 FOREIGN KEY (CUSTOMER)
    REFERENCES customers(ID);

--
-- Create table `floors`
--
CREATE TABLE floors (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  IMAGE MEDIUMBLOB DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 262144,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `FLOORS_NAME_INX` on table `floors`
--
ALTER TABLE floors 
  ADD UNIQUE INDEX FLOORS_NAME_INX(NAME);

--
-- Create table `places`
--
CREATE TABLE places (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  X INT(11) NOT NULL,
  Y INT(11) NOT NULL,
  FLOOR VARCHAR(255) NOT NULL,
  CUSTOMER VARCHAR(255) DEFAULT NULL,
  WAITER VARCHAR(255) DEFAULT NULL,
  TICKETID VARCHAR(255) DEFAULT NULL,
  TABLEMOVED BIT(1) NOT NULL DEFAULT b'0',
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  LOCKED BIT(1) DEFAULT b'0',
  OPENEDBY VARCHAR(50) DEFAULT NULL,
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 1365,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `PLACES_NAME_INX` on table `places`
--
ALTER TABLE places 
  ADD UNIQUE INDEX PLACES_NAME_INX(NAME);

--
-- Create foreign key
--
ALTER TABLE places 
  ADD CONSTRAINT PLACES_FK_1 FOREIGN KEY (FLOOR)
    REFERENCES floors(ID);

--
-- Create table `attribute`
--
CREATE TABLE attribute (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `attributevalue`
--
CREATE TABLE attributevalue (
  ID VARCHAR(255) NOT NULL,
  ATTRIBUTE_ID VARCHAR(255) NOT NULL,
  VALUE VARCHAR(255) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create foreign key
--
ALTER TABLE attributevalue 
  ADD CONSTRAINT ATTVAL_ATT FOREIGN KEY (ATTRIBUTE_ID)
    REFERENCES attribute(ID) ON DELETE CASCADE;

--
-- Create table `attributeuse`
--
CREATE TABLE attributeuse (
  ID VARCHAR(255) NOT NULL,
  ATTRIBUTESET_ID VARCHAR(255) NOT NULL,
  ATTRIBUTE_ID VARCHAR(255) NOT NULL,
  LINENO INT(11) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `ATTUSE_LINE` on table `attributeuse`
--
ALTER TABLE attributeuse 
  ADD UNIQUE INDEX ATTUSE_LINE(ATTRIBUTESET_ID, LINENO);

--
-- Create foreign key
--
ALTER TABLE attributeuse 
  ADD CONSTRAINT ATTUSE_ATT FOREIGN KEY (ATTRIBUTE_ID)
    REFERENCES attribute(ID);

--
-- Create foreign key
--
ALTER TABLE attributeuse 
  ADD CONSTRAINT ATTUSE_SET FOREIGN KEY (ATTRIBUTESET_ID)
    REFERENCES attributeset(ID) ON DELETE CASCADE;

--
-- Create table `attributeinstance`
--
CREATE TABLE attributeinstance (
  ID VARCHAR(255) NOT NULL,
  ATTRIBUTESETINSTANCE_ID VARCHAR(255) NOT NULL,
  ATTRIBUTE_ID VARCHAR(255) NOT NULL,
  VALUE VARCHAR(255) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create foreign key
--
ALTER TABLE attributeinstance 
  ADD CONSTRAINT ATTINST_ATT FOREIGN KEY (ATTRIBUTE_ID)
    REFERENCES attribute(ID);

--
-- Create foreign key
--
ALTER TABLE attributeinstance 
  ADD CONSTRAINT ATTINST_SET FOREIGN KEY (ATTRIBUTESETINSTANCE_ID)
    REFERENCES attributesetinstance(ID) ON DELETE CASCADE;

--
-- Create table `vouchers`
--
CREATE TABLE vouchers (
  VOUCHER VARCHAR(50) NOT NULL,
  SOLDDATE TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  REDEEMDATE TIMESTAMP NULL DEFAULT NULL,
  SOLDTICKETID VARCHAR(50) DEFAULT NULL,
  REDEEMTICKETID VARCHAR(50) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (VOUCHER)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `ticketsnum_refund`
--
CREATE TABLE ticketsnum_refund (
  ID INT(11) NOT NULL DEFAULT 0
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `ticketsnum_payment`
--
CREATE TABLE ticketsnum_payment (
  ID INT(11) NOT NULL DEFAULT 0
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `ticketsnum_invoice`
--
CREATE TABLE ticketsnum_invoice (
  ID INT(11) NOT NULL DEFAULT 0
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `ticketsnum`
--
CREATE TABLE ticketsnum (
  ID INT(11) NOT NULL DEFAULT 0
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `thirdparties`
--
CREATE TABLE thirdparties (
  ID VARCHAR(255) NOT NULL,
  CIF VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  ADDRESS VARCHAR(255) DEFAULT NULL,
  CONTACTCOMM VARCHAR(255) DEFAULT NULL,
  CONTACTFACT VARCHAR(255) DEFAULT NULL,
  PAYRULE VARCHAR(255) DEFAULT NULL,
  FAXNUMBER VARCHAR(255) DEFAULT NULL,
  PHONENUMBER VARCHAR(255) DEFAULT NULL,
  MOBILENUMBER VARCHAR(255) DEFAULT NULL,
  EMAIL VARCHAR(255) DEFAULT NULL,
  WEBPAGE VARCHAR(255) DEFAULT NULL,
  NOTES VARCHAR(255) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `THIRDPARTIES_CIF_INX` on table `thirdparties`
--
ALTER TABLE thirdparties 
  ADD UNIQUE INDEX THIRDPARTIES_CIF_INX(CIF);

--
-- Create index `THIRDPARTIES_NAME_INX` on table `thirdparties`
--
ALTER TABLE thirdparties 
  ADD UNIQUE INDEX THIRDPARTIES_NAME_INX(NAME);

--
-- Create table `stockchanges`
--
CREATE TABLE stockchanges (
  ID VARCHAR(100) NOT NULL,
  LOCATION VARCHAR(255) DEFAULT NULL,
  USERNAME VARCHAR(50) DEFAULT NULL,
  UPLOADTIME TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  PRODUCTID VARCHAR(255) DEFAULT NULL,
  CHANGETYPE INT(11) DEFAULT NULL,
  DISPLAY VARCHAR(255) DEFAULT NULL,
  FIELD VARCHAR(50) DEFAULT NULL,
  TEXTVALUE VARCHAR(255) DEFAULT NULL,
  BLOBVALUE MEDIUMBLOB DEFAULT NULL,
  CHANGES_PROCESSED INT(11) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `siteguid`
--
CREATE TABLE siteguid (
  GUID VARCHAR(50) NOT NULL,
  PRIMARY KEY (GUID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `sharedtickets`
--
CREATE TABLE sharedtickets (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  CONTENT MEDIUMBLOB DEFAULT NULL,
  PICKUPID INT(11) NOT NULL DEFAULT 0,
  APPUSER VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `resources`
--
CREATE TABLE resources (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  RESTYPE INT(11) NOT NULL,
  CONTENT MEDIUMBLOB DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 7813,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `RESOURCES_NAME_INX` on table `resources`
--
ALTER TABLE resources 
  ADD UNIQUE INDEX RESOURCES_NAME_INX(NAME);

--
-- Create table `pickup_number`
--
CREATE TABLE pickup_number (
  ID INT(11) NOT NULL DEFAULT 0
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `orders`
--
CREATE TABLE orders (
  ID VARCHAR(50) NOT NULL,
  ORDERID VARCHAR(50) DEFAULT NULL,
  QTY INT(11) DEFAULT NULL,
  DETAILS VARCHAR(255) DEFAULT NULL,
  ATTRIBUTES VARCHAR(255) DEFAULT NULL,
  NOTES VARCHAR(255) DEFAULT NULL,
  TICKETID VARCHAR(255) DEFAULT NULL,
  ORDERTIME TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  DISPLAYID INT(11) DEFAULT NULL,
  AUXILIARY INT(11) DEFAULT NULL,
  SEQUENCE INT(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `moorers`
--
CREATE TABLE moorers (
  VESSELNAME VARCHAR(255) DEFAULT NULL,
  SIZE INT(11) DEFAULT NULL,
  DAYS INT(11) DEFAULT NULL,
  POWER BIT(1) NOT NULL DEFAULT b'0',
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `menuentries`
--
CREATE TABLE menuentries (
  ENTRY VARCHAR(255) DEFAULT NULL,
  FOLLOWS VARCHAR(255) DEFAULT NULL,
  GRAPHIC VARCHAR(255) DEFAULT NULL,
  TITLE VARCHAR(255) DEFAULT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `lineremoved`
--
CREATE TABLE lineremoved (
  ID VARCHAR(255) NOT NULL,
  REMOVEDDATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  NAME VARCHAR(255) DEFAULT NULL,
  TICKETID VARCHAR(255) DEFAULT NULL,
  PRODUCTID VARCHAR(255) DEFAULT NULL,
  PRODUCTNAME VARCHAR(255) DEFAULT NULL,
  UNITS DOUBLE NOT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 251,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `hversions`
--
CREATE TABLE hversions (
  VERSION VARCHAR(50) DEFAULT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `estimate`
--
CREATE TABLE estimate (
  CODE VARCHAR(255) NOT NULL,
  PRICESELL DOUBLE DEFAULT 0,
  QUANTITY SMALLINT(6) DEFAULT 0,
  PRIMARY KEY (CODE)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET latin1,
COLLATE latin1_general_ci;

--
-- Create index `UK_estimate_CODE` on table `estimate`
--
ALTER TABLE estimate 
  ADD UNIQUE INDEX UK_estimate_CODE(CODE);

--
-- Create table `draweropened`
--
CREATE TABLE draweropened (
  ID VARCHAR(255) NOT NULL,
  OPENDATE TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  NAME VARCHAR(255) DEFAULT NULL,
  TICKETID VARCHAR(255) DEFAULT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 154,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `dbpermissions`
--
CREATE TABLE dbpermissions (
  CLASSNAME VARCHAR(255) NOT NULL,
  SECTION VARCHAR(255) NOT NULL,
  DISPLAYNAME VARCHAR(255) NOT NULL,
  DESCRIPTION VARCHAR(255) NOT NULL,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (CLASSNAME)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 378,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `DBPERMISSIONS_CLASSNAME_INX` on table `dbpermissions`
--
ALTER TABLE dbpermissions 
  ADD INDEX DBPERMISSIONS_CLASSNAME_INX(CLASSNAME);

--
-- Create table `databasechangeloglock`
--
CREATE TABLE databasechangeloglock (
  ID INT(11) NOT NULL,
  LOCKED BIT(1) NOT NULL,
  LOCKGRANTED DATETIME DEFAULT NULL,
  LOCKEDBY VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

--
-- Create table `databasechangelog`
--
CREATE TABLE databasechangelog (
  ID VARCHAR(255) NOT NULL,
  AUTHOR VARCHAR(255) NOT NULL,
  FILENAME VARCHAR(255) NOT NULL,
  DATEEXECUTED DATETIME NOT NULL,
  ORDEREXECUTED INT(11) NOT NULL,
  EXECTYPE VARCHAR(10) NOT NULL,
  MD5SUM VARCHAR(35) DEFAULT NULL,
  DESCRIPTION VARCHAR(255) DEFAULT NULL,
  COMMENTS VARCHAR(255) DEFAULT NULL,
  TAG VARCHAR(255) DEFAULT NULL,
  LIQUIBASE VARCHAR(20) DEFAULT NULL,
  CONTEXTS VARCHAR(255) DEFAULT NULL,
  LABELS VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 546,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

--
-- Create table `cust_pay_status`
--
CREATE TABLE cust_pay_status (
  TicketID INT(11) NOT NULL,
  RecorID BIGINT(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (RecorID)
)
ENGINE = INNODB,
AUTO_INCREMENT = 239,
AVG_ROW_LENGTH = 4096,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

--
-- Create index `TicketID` on table `cust_pay_status`
--
ALTER TABLE cust_pay_status 
  ADD UNIQUE INDEX TicketID(TicketID);

--
-- Create table `csvimport`
--
CREATE TABLE csvimport (
  ID VARCHAR(255) NOT NULL,
  ROWNUMBER VARCHAR(255) DEFAULT NULL,
  CSVERROR VARCHAR(255) DEFAULT NULL,
  REFERENCE VARCHAR(255) DEFAULT NULL,
  CODE VARCHAR(255) DEFAULT NULL,
  NAME VARCHAR(255) DEFAULT NULL,
  PRICEBUY DOUBLE DEFAULT NULL,
  PRICESELL DOUBLE DEFAULT NULL,
  PREVIOUSBUY DOUBLE DEFAULT NULL,
  PREVIOUSSELL DOUBLE DEFAULT NULL,
  CATEGORY VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `applications`
--
CREATE TABLE applications (
  ID VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  VERSION VARCHAR(255) NOT NULL,
  VERSIONINT INT(11) DEFAULT 20161015,
  SITEGUID VARCHAR(50) NOT NULL DEFAULT 'ee269be8-58ea-4ab7-9500-374fa489703d',
  SFLAG TINYINT(1) DEFAULT 1,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;